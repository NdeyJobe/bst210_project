---
title: "Untitled"
format: html
---

```{r}
# Load packages
library(tidyverse)
library(stringr)
# Ordinal regression packages
library(VGAM)

# Install the GGally package (if not already installed)
install.packages("GGally")

# Load the GGally package
library(GGally)

```

```{r}
# Import data
data <- read_csv("Final_clean_data.csv")
```

# Data Wrangling

```{r}
# Data wrangle
# Get the column names
column_names <- colnames(data)
world_data <- data |> slice(1:217)
world_data <- world_data[, !(names(world_data) %in% c("P", "Handwash", "EAB", "EAS", "EAP", "EAL"))]

# List of columns to exclude from conversion
exclude_columns <- c("Region", "Country", "CC")

# Use lapply to convert all other columns to numeric
world_data[, setdiff(names(world_data), exclude_columns)] <- lapply(
  world_data[, setdiff(names(world_data), exclude_columns)],
  function(x) as.numeric(as.character(x))
)

# Filter the data to keep only countries with GDP greater than 3400
filtered_data <- world_data %>% filter(GDP < 33500)
filtered_data

```

#### PM categorized Data

```{r}
# Define the breaks and labels for the categories
breaks <- c(0.0, 10.0, 25.0, 50.0, Inf)
labels <- c("Low", "Moderate", "High", "Very High")

# Create a categorical variable based on the specified categories
# Create the categorical variable in your data frame
world_data <- world_data %>%
  mutate(pm_category = cut(PM, breaks = breaks, labels = labels, include.lowest = TRUE))
# Display the categorization
print(world_data)

```

#### Region categorized Data

```{r}
# # Assuming your dataset is named 'df' and the column is 'ColumnName'
# world_data$Country <- str_to_upper(world_data$Country)
# #world_data$Country
# 
# # Create a new column named "Region" in the dataset
# world_data$Region <- NA
# #colnames(world_data)
# 
# # List of East Asia and Pacific countries
# east_asia_pacific_countries <- c("AMERICAN SAMOA", "AUSTRALIA", "BRUNEI DARUSSALAM", "CAMBODIA", "CHINA", "FIJI", "FRENCH POLYNESIA", "GUAM", "HONG KONG SAR, CHINA", "INDONESIA", "JAPAN", "KIRIBATI", "KOREA, DEM. PEOPLE'S REP.", "KOREA, REP.", "LAO PDR", "MACAO SAR, CHINA", "MALAYSIA", "MARSHALL ISLANDS", "MICRONESIA, FED. STS.", "MONGOLIA", "MYANMAR", "NAURU", "NEW CALEDONIA", "NEW ZEALAND", "NORTHERN MARIANA ISLANDS", "PALAU", "PAPUA NEW GUINEA", "PHILIPPINES", "SAMOA", "SINGAPORE", "SOLOMON ISLANDS", "THAILAND", "TIMOR-LESTE", "TONGA", "TUVALU", "VANUATU", "VIET NAM")
# # Assign the "East Asia and Pacific" region to the specified countries
# world_data$Region[world_data$Country %in% east_asia_pacific_countries] <- "East Asia and Pacific"
# 
# # List of Europe and Central Asia countries
# europe_central_asia_countries <- c("ALBANIA", "ANDORRA", "ARMENIA", "AUSTRIA", "AZERBAIJAN", "BELARUS", "BELGIUM", "BOSNIA AND HERZEGOVINA", "BULGARIA", "CHANNEL ISLANDS", "CROATIA", "CYPRUS", "CZECHIA", "DENMARK", "ESTONIA", "FAROE ISLANDS", "FINLAND", "FRANCE", "GEORGIA", "GERMANY", "GIBRALTAR", "GREECE", "GREENLAND", "HUNGARY", "ICELAND", "IRELAND", "ISLE OF MAN", "ITALY", "KAZAKHSTAN", "KOSOVO", "KYRGYZ REPUBLIC", "LATVIA", "LIECHTENSTEIN", "LITHUANIA", "LUXEMBOURG", "MOLDOVA", "MONACO", "MONTENEGRO", "NETHERLANDS", "NORTH MACEDONIA", "NORWAY", "POLAND", "PORTUGAL", "ROMANIA", "RUSSIAN FEDERATION", "SAN MARINO", "SERBIA", "SLOVAK REPUBLIC", "SLOVENIA", "SPAIN", "SWEDEN", "SWITZERLAND", "TAJIKISTAN", "TURKIYE", "TURKMENISTAN", "UKRAINE", "UNITED KINGDOM", "UZBEKISTAN")
# # Assign the "Europe and Central Asia" region to the specified countries
# world_data$Region[world_data$Country %in% europe_central_asia_countries] <- "Europe and Central Asia"
# 
# 
# # List of Latin America and Caribbean countries
# latin_america_caribbean_countries <- c(
#   "ANTIGUA AND BARBUDA", "ARGENTINA", "ARUBA", "BAHAMAS, THE", "BARBADOS", "BELIZE", "BOLIVIA", "BRAZIL", "BRITISH VIRGIN ISLANDS",
#   "CAYMAN ISLANDS", "CHILE", "COLOMBIA", "COSTA RICA", "CUBA", "CURACAO", "DOMINICA", "DOMINICAN REPUBLIC", "ECUADOR", "EL SALVADOR",
#   "GRENADA", "GUATEMALA", "GUYANA", "HAITI", "HONDURAS", "JAMAICA", "MEXICO", "NICARAGUA", "PANAMA", "PARAGUAY", "PERU", "PUERTO RICO",
#   "SINT MAARTEN (DUTCH PART)", "ST. KITTS AND NEVIS", "ST. LUCIA", "ST. MARTIN (FRENCH PART)", "ST. VINCENT AND THE GRENADINES",
#   "SURINAME", "TRINIDAD AND TOBAGO", "TURKS AND CAICOS ISLANDS", "URUGUAY", "VENEZUELA, RB", "VIRGIN ISLANDS (U.S.)"
# )
# # Assign the "Latin America and Caribbean" region to the specified countries
# world_data$Region[world_data$Country %in% latin_america_caribbean_countries] <- "Latin America and Caribbean"
# 
# 
# # List of Middle East and North Africa countries
# middle_east_north_africa_countries <- c(
#   "ALGERIA", "BAHRAIN", "DJIBOUTI", "EGYPT, ARAB REP.", "IRAN, ISLAMIC REP.", "IRAQ", "ISRAEL", "JORDAN", "KUWAIT", "LEBANON",
#   "LIBYA", "MALTA", "MOROCCO", "OMAN", "QATAR", "SAUDI ARABIA", "SYRIAN ARAB REPUBLIC", "TUNISIA", "UNITED ARAB EMIRATES",
#   "WEST BANK AND GAZA", "YEMEN, REP."
# )
# # Assign the "Middle East and North Africa" region to the specified countries
# world_data$Region[world_data$Country %in% middle_east_north_africa_countries] <- "Middle East and North Africa"
# 
# # List of North American countries
# north_american_countries <- c("BERMUDA", "CANADA", "UNITED STATES")
# # Assign the "North America" region to the specified countries
# world_data$Region[world_data$Country %in% north_american_countries] <- "North America"
# 
# 
# # List of South Asian countries
# south_asian_countries <- c("AFGHANISTAN", "BANGLADESH", "BHUTAN", "INDIA", "MALDIVES", "NEPAL", "PAKISTAN", "SRI LANKA")
# # Assign the "South Asia" region to the specified countries
# world_data$Region[world_data$Country %in% south_asian_countries] <- "South Asia"
# 
# 
# 
# sub_saharan_africa_countries <- c(
#   "ANGOLA", "BENIN", "BOTSWANA", "BURKINA FASO", "BURUNDI", "CABO VERDE", "CAMEROON", "CENTRAL AFRICAN REPUBLIC",
#   "CHAD", "COMOROS", "CONGO, DEM. REP.", "CONGO, REP.", "COTE D'IVOIRE", "EQUATORIAL GUINEA", "ERITREA", "ESWATINI",
#   "ETHIOPIA", "GABON", "GAMBIA, THE", "GHANA", "GUINEA", "GUINEA-BISSAU", "KENYA", "LESOTHO", "LIBERIA", "MADAGASCAR",
#   "MALAWI", "MALI", "MAURITANIA", "MAURITIUS", "MOZAMBIQUE", "NAMIBIA", "NIGER", "NIGERIA", "RWANDA", "SAO TOME AND PRINCIPE",
#   "SENEGAL", "SEYCHELLES", "SIERRA LEONE", "SOMALIA", "SOUTH AFRICA", "SOUTH SUDAN", "SUDAN", "TANZANIA", "TOGO", "UGANDA",
#   "ZAMBIA", "ZIMBABWE"
# )
# # Assign the "Sub-Saharan Africa" region to the specified countries
# world_data$Region[world_data$Country %in% sub_saharan_africa_countries] <- "Sub-Saharan Africa"
# 
# # Convert "Region" to a factor variable
# world_data$Region <- as.factor(world_data$Region)
# # Set "Sub-Saharan Africa" as the reference level
# world_data$Region <- relevel(world_data$Region, ref = "Sub-Saharan Africa")

```

# 

# Exploratory data analysis

```{r}
# Step1: Missing data
# Check for missing values and handle them
data_backup <- world_data
world_data <- na.omit(world_data)
View(world_data)
# Removes rows with missing values
colnames(world_data)
# Step 2: Perform regression analysis and variable selection
# Fit a linear regression model to assess the effect of CO2 on under-five mortality


# Create the model
model <- world_data %>%
  group_by(Region) %>%
  summarize(coef_CO2 = coef(lm(Mortality ~ CO2, data = .)))

# Summarize the model for each region
model_summary <- model %>%
  mutate(model_summary = map(Region, ~ summary(lm(Mortality ~ CO2, data = filter(world_data, Region == .x)))))

# View the model summary
print(model_summary)

# Summarize the regression model
summary(model)

# You can use the summary to assess the significance of the variables and their coefficients.
# You may want to look at p-values and adjust your model accordingly.

# Step 3: Model selection
# Based on the summary, you can decide which variables to include in the final model.
# You can repeat the process with different subsets of variables and compare model fit metrics.

# For example, to include other variables in the model:
# Add more predictors by including them in the formula

final_model <- lm(Mortality ~ CO2, data = world_data)

# Summarize the final model
summary(final_model)

# Repeat this process for different combinations of variables until you find the best model for your research question.

# Sort the data by CO2 in descending order and select the top N countries
top_countries <- world_data %>%
  arrange(desc(GDP)) %>%
  head(217)  # Replace N with the number of top countries you want to select

# View the list of countries with the highest CO2 emissions
print(top_countries$Country)



 
```

# Graphical exploration

```{r}

# Create a scatter plot with multiple geoms (one for each predictor variable)
ggplot(data = world_data) +
  geom_point(aes(x = Mortality, y = PM), color = "blue") 


```

# Ordinal

```{r}
# Ordinal Regression #
######################
library(VGAM)
# NOTE:
# We will get the negative of the coefficients and same "intercept" as in Stata
# if we set reverse = FALSE(default), because when reverse = FALSE, 
# the model is P(Y<=j)/P(Y>j) = aj + b1X1 + ... + bpXp;
# when reverse = TRUE, the model is P(Y>=j)/P(Y<j) = aj + b1X1 + ... + bpXp
# Stata fits the model P(Y<=j)/P(Y>j) = aj - (b1X1 + ... + bpXp) 

mod.2 = vglm(PM ~ Mortality,
             cumulative(parallel=TRUE, reverse=FALSE), data=world_data)
summary(mod.2)


mod.2.2 = vglm(outcome ~ treatment,
     cumulative(parallel=TRUE, reverse=TRUE), data=dat)
summary(mod.2.2)

# Look at how fitted values compare to observed proportions
table(dat$outcome, dat$treatment)
prop.table(table(dat$outcome, dat$treatment), margin = 2)
# Penicillin fitted probs.
fitted(mod.2)[dat$treatment == "Penicillin",][1,]
# Spect-Low fitted probs.
fitted(mod.2)[dat$treatment == "Spect-Low",][1,]
# Spect-High fitted probs.
fitted(mod.2)[dat$treatment == "Spect-Hight",][1,]

#############################
# Using a different package #
#############################
library(MASS)
mod.2b = polr(as.factor(outcome) ~ treatment, data = dat)
summary(mod.2b)
```

# Generalized ordinal

```{r}
# Fitting a generalized ordinal model (without the proportional odds assumption)
mod.no.po <- vglm(mortality ~ sex + age, cumulative(parallel=FALSE, reverse=T), data=framingham)
mod.no.po

# Conducting the likelihood ratio test
pchisq(deviance(ord.agesex) - deviance(mod.no.po), df=df.residual(ord.agesex)-df.residual(mod.no.po), lower.tail=F)

```

# Poisson

```{r}
# Examining Confounding
mod.cig <- glm(mortality ~ cigpday, offset=log(manyears), data=lung,
               family=poisson())
#summary(mod.cig)
```
